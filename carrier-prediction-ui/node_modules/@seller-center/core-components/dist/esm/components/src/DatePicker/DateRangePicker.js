import React, { useState, useEffect } from 'react';
import classNames from 'classnames';
import { ChevronLeft as WrappedIcon } from '../../../icons/dist/es6/components/ChevronLeft.js';
import { ChevronRight as WrappedIcon$1 } from '../../../icons/dist/es6/components/ChevronRight.js';
import { Button } from '../Button/Button.js';
import { Divider } from '../Divider/Divider.js';
import { TextField } from '../TextField/TextField.js';
import DateCalendar from 'react-datepicker';
import { getLocaleDateStringFormat, formatToLocalDate } from '../utility/date-format.js';
import { MONTHS } from './constants.js';
import 'react-datepicker/dist/react-datepicker.css';
import style from './DateRangePicker.module.scss.js';

/* istanbul ignore next */
var noop = () => {};

var DateRangePicker = ({
  className = "",
  dateFormat = "",
  disabled = false,
  errorText = "",
  id,
  startLabel = "Start date",
  endLabel = "End date",
  minDate,
  maxDate,
  placement,
  onCalendarClose,
  onApplyDate,
  onCancelDate,
  onCalendarOpen,
  onChange,
  onClear,
  endDate,
  startDate,
  inline = false
}) => {
  var [startDateVal, setStartDate] = useState(startDate);
  var [endDateVal, setEndDate] = useState(endDate);
  var [startDateSnap, setStartDateSnap] = useState(startDate);
  var [endDateSnap, setEndDateSnap] = useState(endDate);
  var [isInputActive, setInputActive] = useState(inline);
  var [handleChangeFromArrow, setHandleChangeFromArrow] = useState(false);
  dateFormat = getLocaleDateStringFormat();
  useEffect(() => {
    setStartDate(startDate);
  }, [startDate]);
  useEffect(() => {
    setEndDate(endDate);
  }, [endDate]);
  /**
   * Date change handler
   * @param e Event object
   */

  function handleOnChange(date) {
    if (handleChangeFromArrow) {
      setHandleChangeFromArrow(false);
      return;
    }

    var [startDate, endDate] = date;
    setStartDate(startDate);
    setEndDate(endDate);
    onChange && onChange(date);
  }
  /**
   * Clear selected date
   * @param e Event object
   */


  function clearDate() {
    setStartDate(undefined);
    setEndDate(undefined);
    onClear && onClear();
  }
  /**
   * Reset to original value
   * @param e Event object
   */


  function cancelDate() {
    setStartDate(startDateSnap);
    setEndDate(endDateSnap);
    setInputActive(inline || false);
    onCancelDate && onCancelDate([startDateSnap, endDateSnap]);
  }
  /**
   * Reset to original value
   * @param e Event object
   */


  function applyDate() {
    setStartDateSnap(startDateVal);
    setEndDateSnap(endDateVal);
    setInputActive(inline || false);
    onApplyDate && onApplyDate([startDateVal, endDateVal]);
  }
  /**
   * Custom Header
   */


  function getCalendarHeader(date) {
    var month = date.getMonth();
    return "".concat(MONTHS[month], " ").concat(date.getFullYear());
  }
  /**
   * On focus of input box
   */


  function onInputFocus() {
    setInputActive(true);
    onCalendarOpen && onCalendarOpen();
  }
  /**
   * on clicking next and previous icon for month change
   */


  function changeMonth(changeFunction) {
    setHandleChangeFromArrow(true);
    changeFunction();
  }

  return /*#__PURE__*/React.createElement("div", {
    className: classNames(style.datePickerWrapper, className)
  }, /*#__PURE__*/React.createElement("div", {
    className: classNames(style.datePickerInputWrapper, className)
  }, /*#__PURE__*/React.createElement(TextField, {
    className: classNames(style.datepickerInput),
    disabled: disabled,
    error: errorText,
    id: "".concat(id, "-input-start"),
    label: startLabel,
    value: formatToLocalDate(startDateVal || ""),
    onChange: noop,
    "data-testid": "".concat(id, "-input-start-test"),
    onFocus: onInputFocus
  }), /*#__PURE__*/React.createElement("div", {
    className: classNames(style.dateSeparator, className)
  }, "\u2013"), /*#__PURE__*/React.createElement(TextField, {
    className: classNames(style.datepickerInput),
    disabled: disabled,
    error: errorText,
    id: "".concat(id, "-input-end"),
    label: endLabel,
    value: formatToLocalDate(endDateVal || ""),
    onChange: noop,
    "data-testid": "".concat(id, "-input-end-test"),
    onFocus: onInputFocus
  })), isInputActive ? /*#__PURE__*/React.createElement("div", {
    className: inline ? "" : classNames(style.datePickerWrapperAction, className)
  }, /*#__PURE__*/React.createElement(Divider, null), /*#__PURE__*/React.createElement("div", {
    className: classNames(style.datepicker, className)
  }, /*#__PURE__*/React.createElement(DateCalendar, {
    renderCustomHeader: ({
      monthDate,
      decreaseMonth,
      increaseMonth,
      prevMonthButtonDisabled,
      nextMonthButtonDisabled,
      customHeaderCount
    }) => /*#__PURE__*/React.createElement("div", {
      className: classNames(style.datepickerHeader),
      style: {
        justifyContent: customHeaderCount === 0 ? "flex-start" : "flex-end"
      }
    }, /*#__PURE__*/React.createElement("span", {
      "aria-label": "decrease-month",
      role: "button",
      onClick: () => !prevMonthButtonDisabled && changeMonth(decreaseMonth)
    }, customHeaderCount === 0 ? /*#__PURE__*/React.createElement(WrappedIcon, {
      size: "small"
    }) : null), /*#__PURE__*/React.createElement(Button, {
      variant: "tertiary",
      size: "medium",
      onClick: noop
    }, getCalendarHeader(monthDate)), /*#__PURE__*/React.createElement("span", {
      "aria-label": "increase-month",
      role: "button",
      onClick: () => {
        !nextMonthButtonDisabled && changeMonth(increaseMonth);
      }
    }, customHeaderCount === 1 ? /*#__PURE__*/React.createElement(WrappedIcon$1, {
      size: "small"
    }) : null)),
    selected: startDateVal,
    onChange: handleOnChange,
    startDate: startDateVal,
    endDate: endDateVal,
    monthsShown: 2,
    selectsRange: true,
    inline: true,
    calendarClassName: classNames(style.datepickerCal),
    dateFormat: dateFormat,
    adjustDateOnChange: true,
    disabledKeyboardNavigation: true,
    showPopperArrow: false,
    shouldCloseOnSelect: false,
    onCalendarClose: onCalendarClose,
    onCalendarOpen: onCalendarOpen,
    popperPlacement: placement,
    minDate: minDate,
    maxDate: maxDate
  })), /*#__PURE__*/React.createElement(Divider, null), /*#__PURE__*/React.createElement("div", {
    className: classNames(style.datePickerFooter, className)
  }, /*#__PURE__*/React.createElement(Button, {
    variant: "tertiary",
    size: "medium",
    onClick: clearDate
  }, "Clear"), /*#__PURE__*/React.createElement("div", {
    className: classNames(style.datePickerFooterAction, className)
  }, /*#__PURE__*/React.createElement(Button, {
    variant: "tertiary",
    size: "medium",
    onClick: cancelDate
  }, "Cancel"), /*#__PURE__*/React.createElement(Button, {
    variant: "primary",
    size: "medium",
    disabled: !(startDateVal && endDateVal),
    onClick: applyDate
  }, "Apply")))) : null);
};
DateRangePicker.defaultProps = {
  placement: "bottom"
};

export { DateRangePicker };
