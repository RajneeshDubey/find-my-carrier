import { objectWithoutProperties as _objectWithoutProperties, objectSpread2 as _objectSpread2, extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { forwardRef, useState, createElement } from 'react';
import classNames from 'classnames';
import getNodeId from '../utility/getNodeId.js';
import { FormControlError } from '../FormControl/FormControlError.js';
import { FormControlHelperText } from '../FormControl/FormControlHelperText.js';
import { FormControlLabel } from '../FormControl/FormControlLabel.js';
import style from './TextArea.module.scss.js';

var TextArea = /*#__PURE__*/forwardRef((props, ref) => {
  var {
    className,
    disabled = false,
    error,
    helperText,
    id: initialId,
    label,
    maxLength,
    onChange,
    placeholder,
    textAreaProps: initialTextAreaProps,
    value = ""
  } = props,
      rest = _objectWithoutProperties(props, ["className", "disabled", "error", "helperText", "id", "label", "maxLength", "onChange", "placeholder", "textAreaProps", "value"]);

  var [isFocused, setIsFocused] = useState(false);
  var [length, setLength] = useState(value.length);
  var id = getNodeId("textArea", initialId);
  var helperId = "".concat(id, "_helper");

  var textAreaProps = _objectSpread2(_objectSpread2(_objectSpread2({
    disabled,
    id,
    maxLength,
    placeholder,
    value,
    onChange: event => {
      setLength(event.target.value.length);
      onChange(event);
    }
  }, (error || helperText || maxLength) && {
    "aria-describedby": helperId
  }), initialTextAreaProps), {}, {
    className: classNames(style.textarea, error && style.error, initialTextAreaProps === null || initialTextAreaProps === void 0 ? void 0 : initialTextAreaProps.className),

    onBlur(event) {
      var _initialTextAreaProps;

      setIsFocused(false);
      initialTextAreaProps === null || initialTextAreaProps === void 0 ? void 0 : (_initialTextAreaProps = initialTextAreaProps.onBlur) === null || _initialTextAreaProps === void 0 ? void 0 : _initialTextAreaProps.call(initialTextAreaProps, event);
    },

    onFocus(event) {
      var _initialTextAreaProps2;

      setIsFocused(true);
      initialTextAreaProps === null || initialTextAreaProps === void 0 ? void 0 : (_initialTextAreaProps2 = initialTextAreaProps.onFocus) === null || _initialTextAreaProps2 === void 0 ? void 0 : _initialTextAreaProps2.call(initialTextAreaProps, event);
    }

  });

  return /*#__PURE__*/createElement("div", _extends({
    className: classNames(style.container, className)
  }, rest), /*#__PURE__*/createElement(FormControlLabel, {
    disabled: disabled,
    htmlFor: id,
    isEmpty: !placeholder && !value,
    isFocused: isFocused
  }, label), /*#__PURE__*/createElement("textarea", _extends({}, textAreaProps, {
    ref: ref
  })), (error || helperText || maxLength) && /*#__PURE__*/createElement(FormControlHelperText, {
    className: style.helperText,
    id: helperId
  }, error && /*#__PURE__*/createElement(FormControlError, null, error), !error && /*#__PURE__*/createElement("span", null, helperText), maxLength && /*#__PURE__*/createElement("span", {
    className: style.maxLength
  }, length, " / ", maxLength)));
});
TextArea.displayName = "TextArea";

export { TextArea };
