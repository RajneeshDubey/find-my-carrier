import { objectWithoutProperties as _objectWithoutProperties, objectSpread2 as _objectSpread2, extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { forwardRef, useState, createElement } from 'react';
import classNames from 'classnames';
import getNodeId from '../utility/getNodeId.js';
import { FormControlError } from '../FormControl/FormControlError.js';
import { FormControlHelperText } from '../FormControl/FormControlHelperText.js';
import { FormControlLabel } from '../FormControl/FormControlLabel.js';
import style from './TextField.module.scss.js';

var autoComplete = {
  email: "email",
  password: "new-password",
  tel: "tel"
};
var TextField = /*#__PURE__*/forwardRef( // eslint-disable-next-line complexity
(props, ref) => {
  var {
    className,
    disabled = false,
    error,
    helperText,
    id: initialId,
    label,
    leading,
    onChange,
    placeholder,
    textFieldProps: initialTextFieldProps,
    trailing,
    type,
    value = ""
  } = props,
      rest = _objectWithoutProperties(props, ["className", "disabled", "error", "helperText", "id", "label", "leading", "onChange", "placeholder", "textFieldProps", "trailing", "type", "value"]);

  var [isFocused, setIsFocused] = useState(false);
  var id = getNodeId("select", initialId);
  var helperId = "".concat(id, "_helper");

  var textFieldProps = _objectSpread2(_objectSpread2(_objectSpread2({
    disabled,
    id,
    onChange,
    placeholder,
    type,
    value,
    autoComplete: type && autoComplete[type]
  }, (error || helperText) && {
    "aria-describedby": helperId
  }), initialTextFieldProps), {}, {
    className: classNames(style.input, initialTextFieldProps === null || initialTextFieldProps === void 0 ? void 0 : initialTextFieldProps.className),

    onBlur(event) {
      var _initialTextFieldProp;

      setIsFocused(false);
      initialTextFieldProps === null || initialTextFieldProps === void 0 ? void 0 : (_initialTextFieldProp = initialTextFieldProps.onBlur) === null || _initialTextFieldProp === void 0 ? void 0 : _initialTextFieldProp.call(initialTextFieldProps, event);
    },

    onFocus(event) {
      var _initialTextFieldProp2;

      setIsFocused(true);
      initialTextFieldProps === null || initialTextFieldProps === void 0 ? void 0 : (_initialTextFieldProp2 = initialTextFieldProps.onFocus) === null || _initialTextFieldProp2 === void 0 ? void 0 : _initialTextFieldProp2.call(initialTextFieldProps, event);
    }

  });

  return /*#__PURE__*/createElement("div", _extends({
    className: classNames(style.container, className)
  }, rest), /*#__PURE__*/createElement(FormControlLabel, {
    className: classNames(!isFocused && !placeholder && !value && leading && style.label),
    disabled: disabled,
    htmlFor: id,
    isEmpty: !placeholder && !value,
    isFocused: isFocused
  }, label), /*#__PURE__*/createElement("div", {
    className: classNames(style.inputContainer, disabled && style.isDisabled, error && style.error, isFocused && style.isFocused)
  }, leading && /*#__PURE__*/createElement("span", {
    "aria-hidden": true,
    className: classNames(style.icon, style.leading)
  }, leading), /*#__PURE__*/createElement("input", _extends({}, textFieldProps, {
    ref: ref
  })), trailing && /*#__PURE__*/createElement("span", {
    className: classNames(style.icon, style.trailing)
  }, trailing)), (error || helperText) && /*#__PURE__*/createElement(FormControlHelperText, {
    id: helperId
  }, error && /*#__PURE__*/createElement(FormControlError, null, error), !error && /*#__PURE__*/createElement("span", null, helperText)));
});
TextField.displayName = "TextField";

export { TextField };
