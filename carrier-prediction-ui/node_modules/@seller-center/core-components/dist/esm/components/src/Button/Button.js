import { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { createElement, Fragment } from 'react';
import classNames from 'classnames';
import { getTarget } from '../utility/getTarget.js';
import style from './Button.module.scss.js';

/**
 * import { Button } from "@seller-center/core-components"
 */
var Button = props => {
  var {
    as,
    buttonRef,
    className,
    children,
    isFluid = false,
    leading,
    size = "small",
    trailing,
    target,
    type = "button",
    variant = "secondary"
  } = props,
      rest = _objectWithoutProperties(props, ["as", "buttonRef", "className", "children", "isFluid", "leading", "size", "trailing", "target", "type", "variant"]);

  var classes = classNames(style.button, variant === "primary" && style.primary, variant === "secondary" && style.secondary, variant === "tertiary" && style.tertiary, isFluid && style.isFluid, size === "large" && style.large, size === "medium" && style.medium, size === "small" && style.small, className);
  var contents = /*#__PURE__*/createElement(Fragment, null, leading && /*#__PURE__*/createElement("span", {
    className: style.leading
  }, leading), children, trailing && /*#__PURE__*/createElement("span", {
    className: style.trailing
  }, trailing));

  var anchorKeyDown = e => {
    // istanbul ignore next
    if (e.key !== " ") {
      return;
    }

    var onClick = props.onClick;
    onClick === null || onClick === void 0 ? void 0 : onClick(e); // istanbul ignore next

    if (e.defaultPrevented || !props.href) {
      return;
    }

    location.assign(props.href);
  }; // TODO Anoop - useCallback had issues when transpiled.
  // const anchorKeyDown = React.useCallback(
  //   (e) => {
  //     if (e.key !== " ") {
  //       return;
  //     }
  //     const onClick = props.onClick as ButtonAnchorProps["onClick"];
  //     onClick?.(e);
  //     if (e.defaultPrevented || !props.href) {
  //       return;
  //     }
  //     location.assign(props.href);
  //   },
  //   [props.onClick, props.href]
  // );


  if (as === "a") {
    return /*#__PURE__*/createElement("a", _extends({
      className: classes,
      ref: buttonRef
    }, rest, {
      onKeyDown: anchorKeyDown
    }, getTarget(target)), contents);
  } // Disabling because dynamic types are not allowed for buttons. See: https://github.com/yannickcr/eslint-plugin-react/issues/1846

  /* eslint-disable react/button-has-type */


  return /*#__PURE__*/createElement("button", _extends({
    className: classes,
    type: type,
    ref: buttonRef
  }, rest), contents);
};

export { Button };
