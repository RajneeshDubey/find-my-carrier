import { objectWithoutProperties as _objectWithoutProperties, extends as _extends, objectSpread2 as _objectSpread2 } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import React from 'react';
import classNames from 'classnames';
import style from './ProgressTracker.module.scss.js';
import style$1 from './ProgressTrackerItem.module.scss.js';

var ProgressTracker = props => {
  var {
    activeIndex = 0,
    children,
    className,
    variant = "info"
  } = props,
      rest = _objectWithoutProperties(props, ["activeIndex", "children", "className", "variant"]);

  var lastIndex = React.Children.count(children) - 1;
  var clampedIndex;

  if (lastIndex >= 0 && activeIndex > lastIndex) {
    clampedIndex = lastIndex;
  } else if (activeIndex < 0) {
    clampedIndex = 0;
  } else {
    clampedIndex = activeIndex;
  }

  return /*#__PURE__*/React.createElement("div", _extends({
    className: classNames(style.progressTracker, variant === "info" && style.info, variant === "success" && style.success, variant === "warning" && style.warning, className)
  }, rest), /*#__PURE__*/React.createElement("span", {
    className: style.track // eslint-disable-next-line react/forbid-dom-props
    ,
    style: {
      width: "".concat(100 * clampedIndex / lastIndex, "%")
    }
  }), /*#__PURE__*/React.createElement("div", {
    className: style.labels
  }, React.Children.map(children, (child, index) => {
    if (! /*#__PURE__*/React.isValidElement(child)) {
      return null;
    }

    return /*#__PURE__*/React.cloneElement(child, _objectSpread2(_objectSpread2({}, child.props), {}, {
      className: classNames(index === 0 && style.itemFirst, index === lastIndex && style.itemLast, activeIndex >= index && style.itemActive, activeIndex === index && style$1.itemCurrent, child.props.className),
      children: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("span", {
        className: style.dot
      }), child.props.children),
      key: index,
      style: _objectSpread2(_objectSpread2({}, child.props.style), {}, {
        width: "".concat(index === 0 || index === lastIndex ? 50 / lastIndex : 100 / lastIndex, "%")
      })
    }));
  })));
};

export { ProgressTracker };
