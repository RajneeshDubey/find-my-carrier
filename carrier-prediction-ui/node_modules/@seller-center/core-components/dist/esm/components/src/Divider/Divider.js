import { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { createElement } from 'react';
import classNames from 'classnames';
import invariant from '../utility/invariant.js';
import style from './Divider.module.scss.js';

var Divider = _ref => {
  var {
    "aria-label": ariaLabel,
    className,
    title
  } = _ref,
      rest = _objectWithoutProperties(_ref, ["aria-label", "className", "title"]);

  // const { "aria-label": ariaLabel, className, title, ...rest } = props;
  // Convert boolean strings to pure booleans. !bool can have unintended side-effects.
  // `ariaHidden` should default to `true` unless overridden.
  var ariaHidden = !(rest["aria-hidden"] === "false" || rest["aria-hidden"] === false);
  invariant(!!(ariaHidden || !ariaHidden && (ariaLabel !== undefined || title !== undefined)), "`Divider` accessibility violation. `Divider` requires an accessible label if `aria-hidden` is false.");
  return /*#__PURE__*/createElement("hr", _extends({
    "aria-hidden": ariaHidden,
    className: classNames(style.divider, className)
  }, title && {
    title
  }, rest));
};

export { Divider };
