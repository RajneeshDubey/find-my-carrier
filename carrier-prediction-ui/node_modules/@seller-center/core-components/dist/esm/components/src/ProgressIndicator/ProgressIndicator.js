import { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import React from 'react';
import classNames from 'classnames';
import { applyCommonProps } from '../utility/commonProps.js';
import invariant from '../utility/invariant.js';
import style from './ProgressIndicator.module.scss.js';
import { useNodeId } from '../hooks/useNodeId.js';

var ProgressIndicator = props => {
  var _applyCommonProps = applyCommonProps(props, ProgressIndicator),
      {
    a11yLabelledBy,
    className,
    label,
    max = 100,
    min = 0,
    value = 0,
    valueLabel,
    variant = "info"
  } = _applyCommonProps,
      rest = _objectWithoutProperties(_applyCommonProps, ["a11yLabelledBy", "className", "label", "max", "min", "value", "valueLabel", "variant"]);

  var labelCount = (label ? 1 : 0) + (a11yLabelledBy ? 1 : 0) === 1;
  invariant(labelCount, "`ProgressIndicator` accessibility violation. `ProgressIndicator` requires a `label` OR an `a11yLabelledBy`.");
  var labelId = useNodeId("progress_indicator");
  var hasLabel = label || valueLabel;
  return /*#__PURE__*/React.createElement("span", _extends({
    "aria-valuemax": max,
    "aria-valuemin": min,
    "aria-valuenow": value,
    className: classNames(style.progressIndicator, className),
    role: "progressbar"
  }, a11yLabelledBy && {
    "aria-labelledby": a11yLabelledBy
  }, label && {
    "aria-labelledby": labelId
  }, valueLabel && {
    "aria-valuetext": valueLabel
  }, rest), /*#__PURE__*/React.createElement("span", {
    className: style.track
  }, /*#__PURE__*/React.createElement("span", {
    className: classNames(style.trackFill, variant === "error" && style.error, variant === "info" && style.info, variant === "success" && style.success, variant === "warning" && style.warning) // eslint-disable-next-line react/forbid-dom-props
    ,
    style: {
      width: "".concat((value - min) / (max - min) * 100, "%")
    }
  })), hasLabel && /*#__PURE__*/React.createElement("span", {
    className: style.labelContainer
  }, /*#__PURE__*/React.createElement("span", _extends({
    className: style.label
  }, label && {
    id: labelId
  }), label), /*#__PURE__*/React.createElement("span", {
    className: style.valueLabel
  }, valueLabel)));
};
ProgressIndicator.displayName = "ProgressIndicator";

export { ProgressIndicator };
