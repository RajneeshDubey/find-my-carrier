import { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { useRef, useEffect, createElement } from 'react';

var FocusGuard = props => {
  var {
    children,
    onGuard,
    autoFocus = true
  } = props,
      rest = _objectWithoutProperties(props, ["children", "onGuard", "autoFocus"]);

  var ref = useRef(null);
  useEffect(() => {
    var _ref$current;

    // Return if autofocus is disabled
    if (!autoFocus) {
      return;
    } // istanbul ignore next


    var focusableNodes = ((_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.querySelectorAll( // @see {@link https://github.com/theKashey/focus-lock/blob/125a50bc53fdc2cbb7705327790ecff4f3289ba1/src/utils/tabbables.ts#L4-L24}
    "a[href], button:enabled, input:enabled:not([type=hidden]), select:enabled, textarea:enabled, [tabindex], [autofocus]")) || []; // NOTE: first and last node are focus guards, second node will be the first focusable item.

    setTimeout(() => focusableNodes[1].focus(), 0);
  }, []);
  return /*#__PURE__*/createElement("div", _extends({
    ref: ref
  }, rest), /*#__PURE__*/createElement("div", {
    tabIndex: 0,
    onFocus: onGuard
  }), /*#__PURE__*/createElement("div", {
    tabIndex: -1
  }), children, /*#__PURE__*/createElement("div", {
    tabIndex: 0,
    onFocus: onGuard
  }));
};

export { FocusGuard };
