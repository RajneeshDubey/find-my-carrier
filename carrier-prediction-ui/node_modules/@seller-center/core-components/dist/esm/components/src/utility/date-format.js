import { format } from 'date-fns-tz';
import { dateFormatLocaleMap } from './constants.js';
export * from 'date-fns';

var INVALID_DATE = "invalid date";
var getTimeZoneAbbr = () => {
  var timeZoneAbbr = "";

  try {
    var dateStr = new Date().toTimeString();
    timeZoneAbbr = dateStr.match(/[A-Z](?!.*[(])/g).join("");
  } catch (e) {
    // istanbul ignore next
    timeZoneAbbr = "CST";
  }

  return timeZoneAbbr;
};
var formatToLocalDate = (date, locale) => {
  // istanbul ignore next
  if (!date) {
    console.log(INVALID_DATE, date);
    return "";
  }

  var dateFormat = getLocaleDateStringFormat(locale);
  var dateToFormat = date; // istanbul ignore next

  if (Object.prototype.toString.call(date) !== "[object Date]") {
    var localDate = tryParseDate(date);

    if (!localDate) {
      return "";
    }

    dateToFormat = new Date(localDate.getUTCFullYear(), localDate.getUTCMonth(), localDate.getUTCDate());
  }

  return format(dateToFormat, dateFormat);
};
var getLocaleDateStringFormat = userLocale => {
  // istanbul ignore next
  var locale = userLocale || navigator.language || "en-US"; // istanbul ignore next

  return dateFormatLocaleMap[locale] || "MM/dd/yyyy";
};

var tryParseDate = date => {
  try {
    var parsedValue = new Date(date);

    if (isNaN(parsedValue.getDate())) {
      throw INVALID_DATE;
    }

    return parsedValue;
  } catch (ex) {
    console.log(INVALID_DATE, ex);
  }
};

export { formatToLocalDate, getLocaleDateStringFormat, getTimeZoneAbbr };
