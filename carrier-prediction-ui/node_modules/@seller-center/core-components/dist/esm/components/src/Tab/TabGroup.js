import { objectWithoutProperties as _objectWithoutProperties, objectSpread2 as _objectSpread2, extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { Children, useRef, cloneElement, createElement } from 'react';
import invariant from '../utility/invariant.js';
import getNodeId from '../utility/getNodeId.js';
import style from './TabGroup.module.scss.js';

/**
 * Tab Group
 *
 * @see {@link https://whatsock.com/tsg/Coding%20Arena/ARIA%20and%20Non-ARIA%20Tabs/ARIA%20Tabs%20(Internal%20Content)/demo.htm}
 *
 * @param {TabGroupProps} props - Tab group props
 * @returns {(React.ReactElement|null)} â€” Tab group
 */
var TabGroup = props => {
  var {
    children,
    content,
    onChange,
    selectedIndex = 0
  } = props,
      rest = _objectWithoutProperties(props, ["children", "content", "onChange", "selectedIndex"]);

  var hasTabs = Children.toArray(children).length > 0;
  var refs = useRef({});
  invariant(hasTabs, "Invalid prop `children` supplied to `TabGroup`.");

  if (!hasTabs) {
    return null;
  }

  var onKeyDown = event => {
    var totalChildren = children.length;
    var index = 0;

    for (index = 0; index < totalChildren; index += 1) {
      if (refs.current[index] === document.activeElement) {
        break;
      }
    }

    if (index >= totalChildren) {
      return;
    }

    refs.current[index].tabIndex = -1;

    switch (event.key) {
      case "ArrowRight":
        refs.current[index >= totalChildren - 1 ? 0 : index + 1].focus();
        break;

      case "ArrowLeft":
        refs.current[index <= 0 ? totalChildren - 1 : index - 1].focus();
        break;

      case "Home":
        refs.current[0].focus();
        break;

      case "End":
        refs.current[totalChildren - 1].focus();
        break;

      case "Tab":
        refs.current[index].tabIndex = 0;
        break;
    }
  };

  var tabs = Children.map(children, (child, i) => {
    var selected = i === selectedIndex;
    var tabItem = child;
    var id = getNodeId("tab", tabItem.props.id);
    return /*#__PURE__*/cloneElement(tabItem, _objectSpread2({
      id,
      onKeyDown,
      selected,
      onClick: () => onChange(i),
      ref: currentTab => {
        refs.current[i] = currentTab; // TODO: no idea how to type this properly

        var {
          ref
        } = tabItem;

        if (typeof ref !== "function") {
          return;
        } // @see {@link https://github.com/facebook/react/issues/8873#issuecomment-275423780}


        ref(currentTab);
      }
    }, selected ? {} : {
      tabIndex: -1
    }));
  });
  var ariaOwns = (tabs || []).map(tab => tab.props.id);
  return /*#__PURE__*/createElement("div", _extends({
    className: style.tabGroupContainer
  }, rest), /*#__PURE__*/createElement("div", {
    "aria-owns": ariaOwns.join(" "),
    className: style.tabGroup,
    role: "tablist"
  }, tabs), /*#__PURE__*/createElement("div", {
    "aria-labelledby": ariaOwns[selectedIndex] // per a11y, this is a special case: https://jira.walmart.com/browse/CEDCORE-676
    // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex
    ,
    tabIndex: 0,
    role: "tabpanel"
  }, content));
};

export { TabGroup };
