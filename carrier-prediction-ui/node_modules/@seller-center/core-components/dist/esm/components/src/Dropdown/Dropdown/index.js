import { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../../../_virtual/_rollupPluginBabelHelpers.js';
import { createElement } from 'react';
import classNames from 'classnames';
import { Check as WrappedIcon } from '../../../../icons/dist/es6/components/Check.js';
import { Button } from '../../Button/Button.js';
import { Checkbox } from '../../Checkbox/Checkbox.js';
import style from './Dropdown.module.scss.js';
import { Popover } from '../../Popover/Popover.js';
import { Options } from '../Options/index.js';
import useSelect from '../useSelect.js';
import { defaultColumnsProp } from '../constants.js';
import { Search } from '../Search/index.js';

var Dropdown = props => {
  var {
    children,
    options,
    onChange,
    className,
    optionsContainerStyle,
    selectedOptions,
    isOpen,
    columns = defaultColumnsProp,
    onClose = () => {},
    keyAccessor = "label",
    isMultiSelect = false,
    showColumnHeader = false,
    isHeaderSelectable = false,
    isHeaderSelected = false,
    onHeaderClick = () => {},
    disableOptionsSort = true,
    showSearchFilter = false,
    shouldCloseOnChange = true,
    showActions = false,
    onSaveChanges = () => {},
    searchInputProps = {},
    popoverProps = {}
  } = props,
      rest = _objectWithoutProperties(props, ["children", "options", "onChange", "className", "optionsContainerStyle", "selectedOptions", "isOpen", "columns", "onClose", "keyAccessor", "isMultiSelect", "showColumnHeader", "isHeaderSelectable", "isHeaderSelected", "onHeaderClick", "disableOptionsSort", "showSearchFilter", "shouldCloseOnChange", "showActions", "onSaveChanges", "searchInputProps", "popoverProps"]);

  var {
    getOptionProps,
    augmentedOptions
  } = useSelect({
    options,
    selectedOptions,
    onChange,
    keyAccessor,
    isMultiSelect,
    shouldCloseOnChange,
    onClose
  });
  var basePopoverProps = {
    className: classNames(style.innerPopoverContainer)
  };

  var SelectedTick = ({
    isSelected
  }) => {
    return isSelected ? /*#__PURE__*/createElement(WrappedIcon, {
      size: "small",
      a11yLabel: "option selected",
      className: classNames(style.selectIcon)
    }) : /*#__PURE__*/createElement("div", {
      className: classNames(style.emptyTick)
    });
  };

  var CheckBox = ({
    isSelected
  }) => {
    return /*#__PURE__*/createElement(Checkbox, {
      a11yLabelledBy: "options selected",
      checked: isSelected,
      onChange: () => {}
    });
  };

  var HeaderSelectColumn = () => {
    if (!isHeaderSelectable) return "";
    return isMultiSelect ? /*#__PURE__*/createElement(CheckBox, {
      isSelected: isHeaderSelected
    }) : /*#__PURE__*/createElement(SelectedTick, {
      isSelected: isHeaderSelected
    });
  };

  var addCheckColumn = col => {
    var selectedColumn = {
      Header: HeaderSelectColumn,
      disableSortBy: true,
      accessor: "isOptionSelected",
      Cell: ({
        row
      }) => {
        var _row$values;

        var isSelected = row === null || row === void 0 ? void 0 : (_row$values = row.values) === null || _row$values === void 0 ? void 0 : _row$values.isOptionSelected;
        return isMultiSelect ? /*#__PURE__*/createElement(CheckBox, {
          isSelected: isSelected
        }) : /*#__PURE__*/createElement(SelectedTick, {
          isSelected: isSelected
        });
      }
    };
    return isMultiSelect ? [selectedColumn, ...col] : [...col, selectedColumn];
  };

  var renderPopoverContent = () => {
    return /*#__PURE__*/createElement("div", _extends({
      className: classNames(style.dropdownContainer, className)
    }, rest), showSearchFilter && /*#__PURE__*/createElement(Search, searchInputProps), /*#__PURE__*/createElement("div", {
      className: classNames(style.options, optionsContainerStyle)
    }, /*#__PURE__*/createElement(Options, {
      getOptionProps: getOptionProps,
      options: augmentedOptions,
      columns: addCheckColumn(columns),
      showColumnHeader: showColumnHeader,
      isHeaderSelectable: isHeaderSelectable,
      isHeaderSelected: isHeaderSelected,
      onHeaderClick: onHeaderClick,
      disableOptionsSort: disableOptionsSort
    })), showActions && /*#__PURE__*/createElement("div", {
      className: classNames(style.actionModals)
    }, /*#__PURE__*/createElement(Button, {
      size: "medium",
      variant: "tertiary",
      onClick: onClose
    }, "Cancel"), /*#__PURE__*/createElement(Button, {
      size: "medium",
      variant: "primary",
      onClick: onSaveChanges
    }, "Save Changes")));
  };

  return /*#__PURE__*/createElement(Popover, _extends({
    content: renderPopoverContent(),
    basePopoverProps: basePopoverProps,
    className: classNames(style.popoverContainer),
    isOpen: isOpen,
    onClose: onClose,
    overrides: {
      content: classNames(style.contentStyle)
    }
  }, popoverProps), children);
};
Dropdown.displayName = "Dropdown";

export { Dropdown };
