import React, { useState, useRef, useEffect, createRef, forwardRef } from 'react';
import classNames from 'classnames';
import { Calendar as WrappedIcon$3 } from '../../../icons/dist/es6/components/Calendar.js';
import { ChevronLeft as WrappedIcon } from '../../../icons/dist/es6/components/ChevronLeft.js';
import { ChevronRight as WrappedIcon$1 } from '../../../icons/dist/es6/components/ChevronRight.js';
import { CloseCircleFill as WrappedIcon$2 } from '../../../icons/dist/es6/components/CloseCircleFill.js';
import { Button } from '../Button/Button.js';
import { TextField } from '../TextField/TextField.js';
import DateCalendar from 'react-datepicker';
import { getTimeZoneAbbr, getLocaleDateStringFormat } from '../utility/date-format.js';
import { MONTHS } from './constants.js';
import style from './DatePicker.module.scss.js';
import 'react-datepicker/dist/react-datepicker.css';

var selectedDate = null;
/* istanbul ignore next */

var noop = () => {};

var DatePicker = ({
  className = "",
  date = null,
  // istanbul ignore next
  dateFormat = "",
  disabled = false,
  errorText = "",
  id,
  label,
  minDate,
  maxDate,
  placement,
  onCalendarClose,
  onCalendarOpen,
  onChange,
  onClear
}) => {
  var [startDate, setStartDate] = useState(date); // Maintains a snap of startDate to enable cancel click

  var [startDateSnap, setStartDateSnap] = useState(date);
  var [showMonthYearPicker, setShowMonthYearPicker] = useState(false);
  var [inMonthSelection, setInMonthSelection] = useState(false);
  var datepickerRef = useRef(null);
  var timezoneAbbr = getTimeZoneAbbr();
  var ref = /*#__PURE__*/createRef();
  dateFormat = getLocaleDateStringFormat();
  useEffect(() => {
    setStartDate(date);
  }, [date]);
  /**
   * Date change handler
   * @param e Event object
   */

  function handleOnChange(date) {
    setStartDate(date);
    selectedDate = date;

    if (showMonthYearPicker) {
      setShowMonthYearPicker(false);
    }

    if (!inMonthSelection) {
      onChange && onChange(date);
      selectDate();
    }

    setInMonthSelection(false);
  }
  /**
   * Clear selected date
   * @param e Event object
   */


  function clearDate() {
    setStartDate(null);
    selectedDate = null; // istanbul ignore next

    onClear && onClear();
  }
  /**
   * Return selected date/time on Apply
   * @param none
   */


  function selectDate() {
    setStartDateSnap(selectedDate);
    onChange && onChange(selectedDate);
    datepickerRef.setOpen(false);
  }

  var getCalendarHeader = date => {
    var month = date.getMonth();
    return "".concat(MONTHS[month], " ").concat(date.getFullYear());
  };
  /**
   * Date custom input
   * @param obj Date object
   */


  var handleMonthClick = () => {
    setInMonthSelection(true);
    setShowMonthYearPicker(!showMonthYearPicker);
  };

  var DateInput = /*#__PURE__*/forwardRef((Obj, ref) => {
    var {
      value,
      onClick
    } = Obj;

    var handleClick = e => {
      e.preventDefault();
      e.stopPropagation();
      onClick && onClick(e);
    };

    var endIcon = value && datepickerRef && datepickerRef.isCalendarOpen && datepickerRef.isCalendarOpen() ? /*#__PURE__*/React.createElement("span", {
      "aria-label": "close-calendar",
      role: "button",
      onClick: clearDate
    }, /*#__PURE__*/React.createElement(WrappedIcon$2, {
      className: classNames(style.closeIcon),
      size: "medium"
    })) : /*#__PURE__*/React.createElement("span", {
      "aria-label": "open-calendar",
      role: "button",
      onClick: handleClick
    }, /*#__PURE__*/React.createElement(WrappedIcon$3, {
      size: "medium",
      onClick: handleClick
    }));
    return /*#__PURE__*/React.createElement(TextField, {
      className: classNames(style.datepickerInput),
      disabled: disabled,
      trailing: endIcon,
      error: errorText,
      id: id,
      label: label,
      value: value,
      onChange: noop,
      onClick: handleClick,
      "data-testid": "date-picker-input"
    });
  });
  return /*#__PURE__*/React.createElement("div", {
    className: classNames(style.datepicker, className)
  }, /*#__PURE__*/React.createElement(DateCalendar, {
    ref: r => datepickerRef = r,
    renderCustomHeader: ({
      date,
      decreaseMonth,
      increaseMonth,
      prevMonthButtonDisabled,
      nextMonthButtonDisabled
    }) => /*#__PURE__*/React.createElement("div", {
      className: classNames(style.datepickerHeader)
    }, /*#__PURE__*/React.createElement("span", {
      "aria-label": "decrease-month",
      role: "button",
      onClick: () => !prevMonthButtonDisabled && decreaseMonth()
    }, /*#__PURE__*/React.createElement(WrappedIcon, {
      size: "small"
    })), /*#__PURE__*/React.createElement(Button, {
      variant: "tertiary",
      onClick: handleMonthClick
    }, getCalendarHeader(date)), /*#__PURE__*/React.createElement("span", {
      "aria-label": "increase-month",
      role: "button",
      onClick: () => !nextMonthButtonDisabled && increaseMonth()
    }, /*#__PURE__*/React.createElement(WrappedIcon$1, {
      size: "small"
    }))),
    calendarClassName: classNames(style.datepickerCal),
    dateFormat: dateFormat,
    adjustDateOnChange: true,
    disabledKeyboardNavigation: true,
    selected: startDate,
    showPopperArrow: false,
    shouldCloseOnSelect: false,
    onCalendarClose: onCalendarClose,
    onCalendarOpen: onCalendarOpen,
    onChange: handleOnChange,
    customInput: /*#__PURE__*/React.createElement(DateInput, {
      ref: ref
    }),
    placeholderText: label,
    minDate: minDate,
    popperPlacement: placement,
    showMonthYearPicker: showMonthYearPicker,
    showFullMonthYearPicker: showMonthYearPicker,
    maxDate: maxDate
  }));
};
DatePicker.defaultProps = {
  placement: "bottom"
};

export { DatePicker };
