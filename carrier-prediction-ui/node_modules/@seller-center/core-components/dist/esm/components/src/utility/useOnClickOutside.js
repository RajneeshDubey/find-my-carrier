import { useEffect } from 'react';

// This file does not have 100% code coverage.
/**
 * Trigger click event when clicking outside of a given ref.
 *
 * Original intention was to be placed on shim's or overlays (e.g. Modal).
 *
 * @see {@link https://github.com/gragland/usehooks/blob/master/src/pages/useOnClickOutside.md}
 *
 * @example
 * const ref1 = useRef();
 * const ref2 = useRef();
 *
 * useOnClickOutside(ref1);
 * useOnClickOutside([ref1, ref2]);
 *
 * @param {React.RefObject | React.RefObject[]} ref — Ref to manage outside click.
 * @param {Function} onClick — Click event handler.
 * @param {Object} options
 * @returns {void}
 */

var useOnClickOutside = (ref, onClick, options = {}) => {
  useEffect(() => {
    var listener = event => {
      var elementRef = Array.isArray(ref) ? ref : [ref];

      if (elementRef.some(ref => {
        var _ref$current;

        return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.contains(event.target);
      })) {
        return;
      } // NOTE: Required to preserve focus return. We don't want to change
      // focus to the newly clicked element, but instead leverage the
      // focus trap's focus return.

      /* istanbul ignore next */


      if (!options.disablePreventDefault) {
        event.preventDefault();
      }

      onClick(event);
    };
    /* istanbul ignore if: JSDOM has open issue for PointerEvent, which is undefined and mocking window.PointerEvent doesn't work properly */
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition


    if (window.PointerEvent) {
      /* istanbul ignore next */
      document.addEventListener("pointerdown", listener);
    } else {
      document.addEventListener("mousedown", listener);
      document.addEventListener("touchstart", listener);
    }

    return () => {
      /* istanbul ignore if JSDOM has open issue for PointerEvent, which is undefined and mocking window.PointerEvent doesn't work properly */
      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
      if (window.PointerEvent) {
        /* istanbul ignore next */
        document.removeEventListener("pointerdown", listener);
      } else {
        document.removeEventListener("mousedown", listener);
        document.removeEventListener("touchstart", listener);
      }
    };
  }, [ref, onClick, options]);
};

export { useOnClickOutside };
