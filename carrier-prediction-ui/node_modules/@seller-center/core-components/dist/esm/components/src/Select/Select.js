import { objectWithoutProperties as _objectWithoutProperties, objectSpread2 as _objectSpread2, extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { forwardRef, useState, createElement } from 'react';
import classNames from 'classnames';
import { CaretDown as WrappedIcon } from '../../../icons/dist/es6/components/CaretDown.js';
import getNodeId from '../utility/getNodeId.js';
import { FormControlError } from '../FormControl/FormControlError.js';
import { FormControlHelperText } from '../FormControl/FormControlHelperText.js';
import { FormControlLabel } from '../FormControl/FormControlLabel.js';
import style from './Select.module.scss.js';

var Select = /*#__PURE__*/forwardRef((props, ref) => {
  var {
    children,
    className,
    disabled = false,
    error,
    helperText,
    id: initialId,
    label,
    onChange,
    selectProps: initialSelectProps,
    value
  } = props,
      rest = _objectWithoutProperties(props, ["children", "className", "disabled", "error", "helperText", "id", "label", "onChange", "selectProps", "value"]);

  var [isFocused, setIsFocused] = useState(false);
  var id = getNodeId("select", initialId);
  var helperId = "".concat(id, "_helper");

  var selectProps = _objectSpread2(_objectSpread2(_objectSpread2({
    disabled,
    id,
    onChange,
    value
  }, (error || helperText) && {
    "aria-describedby": helperId
  }), initialSelectProps), {}, {
    className: classNames(style.select, error && style.error, initialSelectProps === null || initialSelectProps === void 0 ? void 0 : initialSelectProps.className),

    onBlur(event) {
      var _initialSelectProps$o;

      setIsFocused(false);
      initialSelectProps === null || initialSelectProps === void 0 ? void 0 : (_initialSelectProps$o = initialSelectProps.onBlur) === null || _initialSelectProps$o === void 0 ? void 0 : _initialSelectProps$o.call(initialSelectProps, event);
    },

    onFocus(event) {
      var _initialSelectProps$o2;

      setIsFocused(true);
      initialSelectProps === null || initialSelectProps === void 0 ? void 0 : (_initialSelectProps$o2 = initialSelectProps.onFocus) === null || _initialSelectProps$o2 === void 0 ? void 0 : _initialSelectProps$o2.call(initialSelectProps, event);
    }

  });

  return /*#__PURE__*/createElement("div", _extends({
    className: classNames(style.container, className)
  }, rest), /*#__PURE__*/createElement(FormControlLabel, {
    disabled: disabled,
    htmlFor: id,
    isFocused: isFocused
  }, label), /*#__PURE__*/createElement("select", _extends({}, selectProps, {
    ref: ref
  }), children), /*#__PURE__*/createElement(WrappedIcon, {
    className: style.icon,
    size: "medium"
  }), (error || helperText) && /*#__PURE__*/createElement(FormControlHelperText, {
    id: helperId
  }, error && /*#__PURE__*/createElement(FormControlError, null, error), !error && /*#__PURE__*/createElement("span", null, helperText)));
});
Select.displayName = "Select";

export { Select };
