import { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { useRef, createElement } from 'react';
import classNames from 'classnames';
import { applyCommonProps } from '../utility/commonProps.js';
import invariant from '../utility/invariant.js';
import { useLockBodyScroll } from '../utility/useLockBodyScroll.js';
import { useOnClickOutside } from '../utility/useOnClickOutside.js';
import { useOnKeyDown } from '../utility/useOnKeyDown.js';
import { Overlay } from '../Overlay/Overlay.js';
import { OverlayCloseButton } from '../Overlay/OverlayCloseButton.js';
export { OverlayCloseButton as PanelCloseButton } from '../Overlay/OverlayCloseButton.js';
import { OverlayScrim } from '../Overlay/OverlayScrim.js';
import useNodeId from '../utility/useNodeId.js';
import style from './PanelPortal.module.scss.js';

var PanelPortal = props => {
  var _applyCommonProps = applyCommonProps(props, PanelPortal, true),
      {
    actions,
    children,
    onClose,
    closeButtonProps,
    position = "left",
    size = "small",
    title
  } = _applyCommonProps,
      rest = _objectWithoutProperties(_applyCommonProps, ["actions", "children", "onClose", "closeButtonProps", "position", "size", "title"]);

  invariant(!!title, "Required property `title` not provided.");
  var panelRef = useRef(null);
  var panelContentRef = useRef(null);
  var titleId = useNodeId("panelTitle"); // NOTE: On Safari iOS, body-scroll-lock locks scrolling on all elements
  // except for the passed in ref. Need to pass the element that can scroll.
  // https://github.com/reakit/reakit/issues/469#issuecomment-549013422

  useLockBodyScroll(panelContentRef);
  useOnClickOutside(panelRef, onClose);
  useOnKeyDown(["Esc", "Escape"], onClose);
  return /*#__PURE__*/createElement(Overlay, rest, /*#__PURE__*/createElement("div", {
    className: classNames(style.container, position === "left" && style.left, position === "right" && style.right)
  }, /*#__PURE__*/createElement("div", {
    "aria-labelledby": titleId,
    className: classNames(style.panel, size === "small" && style.small, size === "medium" && style.medium, size === "large" && style.large),
    ref: panelRef,
    role: "dialog"
  }, typeof title === "function" && title({
    titleId
  }), typeof title !== "function" && /*#__PURE__*/createElement("div", {
    className: style.header
  }, /*#__PURE__*/createElement(OverlayCloseButton, _extends({
    "aria-label": "Close panel",
    className: style.closeButton,
    onClick: onClose
  }, closeButtonProps)), /*#__PURE__*/createElement("h2", {
    className: style.title,
    id: titleId
  }, title)), /*#__PURE__*/createElement("div", {
    className: style.content,
    ref: panelContentRef
  }, /*#__PURE__*/createElement("div", {
    className: style.contentInner
  }, children)), actions && /*#__PURE__*/createElement("div", {
    className: style.actions
  }, actions))), /*#__PURE__*/createElement(OverlayScrim, null));
};

export { PanelPortal };
