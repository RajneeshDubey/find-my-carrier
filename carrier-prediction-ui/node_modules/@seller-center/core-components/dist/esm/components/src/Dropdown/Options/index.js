import { extends as _extends } from '../../../../_virtual/_rollupPluginBabelHelpers.js';
import { createElement } from 'react';
import classNames from 'classnames';
import { ArrowRight as WrappedIcon } from '../../../../icons/dist/es6/components/ArrowRight.js';
import style from './Options.module.scss.js';
import { useTable, useSortBy } from 'react-table';

var Options = props => {
  var {
    options,
    columns,
    getOptionProps,
    showColumnHeader,
    isHeaderSelectable,
    isHeaderSelected,
    disableOptionsSort,
    onHeaderClick
  } = props;
  var {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    rows,
    prepareRow
  } = useTable({
    columns,
    data: options,
    disableSortBy: disableOptionsSort
  }, useSortBy);

  var toggleHeaderSelection = () => {
    if (!isHeaderSelectable || !onHeaderClick) return;
    onHeaderClick(!isHeaderSelected);
  };

  var SortIcon = ({
    isSorted,
    isSortedDesc
  }) => {
    if (!isSorted) return null;
    return isSortedDesc ? /*#__PURE__*/createElement(WrappedIcon, {
      className: classNames(style.downArrow)
    }) : /*#__PURE__*/createElement(WrappedIcon, {
      className: classNames(style.upArrow)
    });
  };

  return /*#__PURE__*/createElement("table", _extends({
    className: classNames(style.tableContainer)
  }, getTableProps()), showColumnHeader && /*#__PURE__*/createElement("thead", {
    className: classNames(isHeaderSelectable && style.header, isHeaderSelectable && isHeaderSelected && style.headerSelected)
  }, headerGroups.map(headerGroup => /*#__PURE__*/createElement("tr", _extends({
    onClick: toggleHeaderSelection,
    className: classNames(style.headRow, isHeaderSelectable && style.headRowSelectable, isHeaderSelectable && isHeaderSelected && style.headRowSelected)
  }, headerGroup.getHeaderGroupProps()), headerGroup.headers.map(column => /*#__PURE__*/createElement("th", _extends({
    className: classNames(style.headCell)
  }, column.getHeaderProps(column.getSortByToggleProps())), column.render("Header"), /*#__PURE__*/createElement(SortIcon, column)))))), /*#__PURE__*/createElement("tbody", _extends({}, getTableBodyProps(), {
    className: classNames(style.bodyContainer)
  }), rows.map(row => {
    prepareRow(row);
    var {
      onClick,
      isOptionSelected
    } = getOptionProps(row.original);
    return /*#__PURE__*/createElement("tr", _extends({}, row.getRowProps(), {
      className: classNames(style.row, isOptionSelected && style.rowSelected),
      onClick: onClick
    }), row.cells.map(cell => {
      return /*#__PURE__*/createElement("td", _extends({}, cell.getCellProps(), {
        className: classNames(style.cell)
      }), cell.render("Cell"));
    }));
  })));
};
Options.displayName = "Options";

export { Options };
