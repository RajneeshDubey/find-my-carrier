import { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { useRef, Children, createElement, Fragment, cloneElement } from 'react';
import classNames from 'classnames';
import { PopoverPortal } from './PopoverPortal.js';
import style from './Popover.module.scss.js';

var Popover = props => {
  var {
    children,
    isOpen,
    containerClassName
  } = props,
      rest = _objectWithoutProperties(props, ["children", "isOpen", "containerClassName"]);

  var popoverContainerRef = useRef(null);
  var triggerRef = useRef();
  var child = Children.only(children);
  return /*#__PURE__*/createElement(Fragment, null, /*#__PURE__*/createElement("span", {
    className: classNames(containerClassName, style.popoverContainer),
    ref: popoverContainerRef
  }, /*#__PURE__*/cloneElement(child, {
    "aria-expanded": isOpen,
    "aria-haspopup": true,
    ref: node => {
      var {
        ref
      } = child; // @see {@link https://github.com/facebook/react/issues/8873#issuecomment-489579878}

      if (typeof ref === "function") {
        ref(node);
      } else if (ref != null) {
        ref.current = node;
      }

      triggerRef.current = node;
    }
  })), isOpen && /*#__PURE__*/createElement(PopoverPortal, _extends({}, rest, {
    popoverContainerRef: popoverContainerRef,
    triggerRef: triggerRef
  })));
};

export { Popover };
