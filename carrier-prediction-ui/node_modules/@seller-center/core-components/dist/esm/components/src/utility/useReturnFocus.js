import { useState, useEffect } from 'react';

/**
 * React hook for storing the focused element when a component mounts then returning the focus to that component when the component unmounts.
 *
 * @example
 * const MyComponent = () => {
 *    useReturnFocus();
 *    return <div>Content</div>
 *  }
 *  // Will return focus to the element that had focus when this component mounted
 *
 * @param {array} conditions — An array containing variables that when changed will rerun the effect.
 * @param {boolean} disable —  When true, will prevent focus from returning to the previously focused element.
 * @returns {void}
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any

var useReturnFocus = (
/* istanbul ignore next: default case */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
conditions = [], disable = false) => {
  var [previouslyFocusedElement, setPreviouslyFocusedElement] = useState(null);
  useEffect(() => {
    /* istanbul ignore else */
    if (typeof document !== "undefined") {
      var {
        activeElement
      } = document;
      /* istanbul ignore else */

      if (activeElement instanceof HTMLElement) {
        setPreviouslyFocusedElement(activeElement);
      }
    }

    return () => {
      if (!disable) {
        previouslyFocusedElement === null || previouslyFocusedElement === void 0 ? void 0 : previouslyFocusedElement.focus();
      }
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [disable, ...conditions]);
};

export { useReturnFocus };
