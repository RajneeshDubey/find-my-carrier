import { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { forwardRef, createElement } from 'react';
import classNames from 'classnames';
import invariant from '../utility/invariant.js';
import getNodeId from '../utility/getNodeId.js';
import style from './Switch.module.scss.js';

var Switch = /*#__PURE__*/forwardRef((props, ref) => {
  var {
    a11yLabelledBy,
    switchProps = {},
    checked = false,
    className,
    disabled = false,
    id: initialId,
    label,
    name,
    onChange,
    value
  } = props,
      rest = _objectWithoutProperties(props, ["a11yLabelledBy", "switchProps", "checked", "className", "disabled", "id", "label", "name", "onChange", "value"]);

  var labelCount = (label ? 1 : 0) + (a11yLabelledBy ? 1 : 0) === 1;
  invariant(labelCount, "`Switch` accessibility violation. `Switch` requires a `label` OR an `a11yLabelledBy`.");

  var {
    className: switchClassName
  } = switchProps,
      switchRest = _objectWithoutProperties(switchProps, ["className"]);

  var id = getNodeId("switch", initialId);
  var input = /*#__PURE__*/createElement("span", {
    className: classNames(style.switchRoot, !!label && style.hasLabel)
  }, /*#__PURE__*/createElement("input", _extends({
    checked: checked,
    className: classNames(style.input, switchClassName),
    disabled: disabled,
    id: id,
    name: name,
    onChange: onChange,
    ref: ref,
    type: "checkbox"
  }, a11yLabelledBy && {
    "aria-labelledby": a11yLabelledBy
  }, value && {
    value
  }, switchRest)), /*#__PURE__*/createElement("span", {
    className: classNames(style.knob, !!checked && style.hasLabel)
  }), /*#__PURE__*/createElement("span", {
    className: style.pill
  }));
  return /*#__PURE__*/createElement("label", _extends({
    className: classNames(style.label, checked && style.checked, disabled && style.isDisabled, className),
    htmlFor: id
  }, rest), input, label);
});
Switch.displayName = "Switch";

export { Switch };
