import { objectWithoutProperties as _objectWithoutProperties, objectSpread2 as _objectSpread2 } from '../../../_virtual/_rollupPluginBabelHelpers.js';

var useSelect = props => {
  var {
    options,
    selectedOptions,
    onChange,
    keyAccessor,
    onClose,
    isMultiSelect,
    shouldCloseOnChange
  } = props;
  var selectedList = Array.isArray(selectedOptions) ? selectedOptions : selectedOptions ? [selectedOptions] : [];

  var isEqualOptions = (opt1, opt2) => {
    if (typeof opt1 !== "object" || typeof opt2 !== "object") return opt1 === opt2;
    return !!opt1 && !!opt2 && opt1[keyAccessor] === opt2[keyAccessor];
  };

  var checkOptionSelected = option => {
    return selectedList.findIndex(opt => {
      return isEqualOptions(opt, option);
    }) !== -1;
  };

  var getMultiSelectChange = (option, previouslyOptionSelected) => {
    if (!Array.isArray(selectedOptions)) return previouslyOptionSelected ? [] : [option];
    if (!previouslyOptionSelected) return [...selectedOptions, option];
    return selectedOptions.filter(opt => {
      return !isEqualOptions(opt, option);
    });
  };

  var getSingleSelectChange = (option, previouslyOptionSelected) => {
    if (!Array.isArray(selectedOptions)) return previouslyOptionSelected ? null : option;
    return previouslyOptionSelected ? [] : [option];
  };

  var getNewSelectedOptions = (option, previouslyOptionSelected) => {
    return isMultiSelect ? getMultiSelectChange(option, previouslyOptionSelected) : getSingleSelectChange(option, previouslyOptionSelected);
  };

  var onOptionClick = option => {
    var previouslyOptionSelected = checkOptionSelected(option);
    var newSelectedOptions = getNewSelectedOptions(option, previouslyOptionSelected);
    onChange(newSelectedOptions);
    if (shouldCloseOnChange && onClose) onClose();
  };

  var getOptionProps = augmentedOption => {
    var option = _objectWithoutProperties(augmentedOption, ["isOptionSelected"]);

    var {
      realValue
    } = option;
    return {
      onClick: () => onOptionClick(realValue || option),
      isOptionSelected: checkOptionSelected(realValue || option)
    };
  };

  var augmentOptions = opts => {
    if (!Array.isArray(opts)) return [];
    return opts.map(opt => {
      if (typeof opt !== "object") {
        opt = {
          label: opt,
          realValue: opt
        };
      }

      var {
        realValue
      } = opt;
      return _objectSpread2(_objectSpread2({}, opt), {}, {
        isOptionSelected: checkOptionSelected(realValue || opt)
      });
    });
  };

  var getTypeofOptions = options => {
    if (!Array.isArray(options)) return "string";
    var [firstOption] = options;
    return typeof firstOption;
  };

  return {
    getOptionProps,
    augmentedOptions: augmentOptions(options),
    optionType: getTypeofOptions(options)
  };
};

export default useSelect;
