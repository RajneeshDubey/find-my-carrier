import * as React from "react";
export declare type Actions = "select" | "unselect";
export interface ColumnProps {
    /**
     * The column header label.
     */
    Header: string;
    /**
     * The column accessor key.
     */
    accessor: string;
}
export interface SearchProps {
    /**
     * Specifies search filter value.
     */
    searchValue?: string;
    /**
     * Specifies search placeholder.
     */
    searchPlaceholder?: string;
    /**
     * onChnage method when filter value changes.
     */
    onSearchFilterChange?: (filter: string) => void;
    /**
     * The custom classname for the root div of the component
     */
    className?: string;
    /**
     * The custom classname for the root div of the component
     */
    searchInputClassName?: string;
}
export interface DropdownProps<OptionProps> {
    /**
     * The parent of dropdown.
     */
    children: React.ReactNode;
    /**
     * The custom classname for the root div of the component
     */
    className?: string;
    /**
     * The custom classname for the root div of the component
     */
    optionsContainerStyle?: string;
    /**
     * The available options to select.
     */
    options: OptionProps[];
    /**
     * The selected options.
     */
    selectedOptions: OptionProps | OptionProps[];
    /**
     * The change event handler for the checkbox.
     */
    onChange: (option: OptionProps) => void;
    /**
     * Specify if dropdown is open or close.
     */
    isOpen: boolean;
    /**
     * Specifies if dropdown is multi-select.
     *
     * @default false
     */
    isMultiSelect?: boolean;
    /**
     * Specify key attribute to identify option uniquely.
     *
     * @default "value"
     */
    keyAccessor?: string;
    /**
     * Run custom method when dropdown is closed
     */
    onClose?: () => void;
    /**
     * Specify columns configuration for dropdown.
     */
    columns?: ColumnProps[];
    /**
     * Specifies if dropdown should show column header.
     *
     * @default false
     */
    showColumnHeader?: boolean;
    /**
     * Specifies if dropdown column header is selectable.
     *
     * @default false
     */
    isHeaderSelectable?: boolean;
    /**
     * Specifies if dropdown column header is selected.
     *
     * @default false
     */
    isHeaderSelected?: boolean;
    /**
     * Specifies if options can be sorted or not
     *
     * @default true
     */
    disableOptionsSort?: boolean;
    /**
     * Specify change event for header selection
     */
    onHeaderClick?: (isHeaderSelected: boolean) => void;
    /**
     * Specify if search filter needs to be shown.
     *
     * @default false
     */
    showSearchFilter?: boolean;
    /**
     * Specify to close dropdown on change
     *
     * @default true
     */
    shouldCloseOnChange?: boolean;
    /**
     * Specify to show modal like actions
     *
     * @default false
     */
    showActions?: boolean;
    /**
     * Action for saving all changes
     */
    onSaveChanges?: () => {};
    /**
     * Specifies search input props.
     *
     * @default {}
     */
    searchInputProps?: SearchProps;
    /**
     * Specifies popover container props.
     *
     * @default {}
     */
    popoverProps?: any;
}
export interface OptionsProps<OptionProps> {
    /**
     * The available options to select.
     */
    options: OptionProps[];
    /**
     * The selected options.
     */
    selectedOptions?: OptionProps | OptionProps[];
    /**
     * Get props for option
     */
    getOptionProps: (option: any) => {
        onClick: () => void;
        isOptionSelected: boolean;
    };
    /**
     * Specify key attribute to identify option uniquely.
     */
    keyAccessor?: string;
    /**
     * Run custom method when dropdown is closed
     */
    onClose?: () => void;
    /**
     * Specify columns configuration for dropdown.
     */
    columns?: ColumnProps[];
    /**
     * Specifies if dropdown should show column header.
     */
    showColumnHeader?: boolean;
    /**
     * Specifies if dropdown column header is selectable.
     */
    isHeaderSelectable?: boolean;
    /**
     * Specifies if dropdown column header is selected.
     */
    isHeaderSelected?: boolean;
    /**
     * Specifies if options can be sorted or not
     */
    disableOptionsSort?: boolean;
    /**
     * Specify change event for header selection
     */
    onHeaderClick?: (isHeaderSelected: boolean) => void;
}
export interface UseSelectProps<OptionProps> {
    /**
     * The available options to select.
     */
    options: OptionProps[];
    /**
     * The selected options.
     */
    selectedOptions: OptionProps | OptionProps[];
    /**
     * Specify if dropdown is open.
     */
    isOpen?: boolean;
    /**
     * The change event handler for the checkbox.
     */
    onChange: (option: OptionProps) => void;
    /**
     * Specify key attribute to identify option uniquely.
     */
    keyAccessor: string;
    /**
     * Run custom method when dropdown is closed
     */
    onClose?: () => void;
    /**
     * Specifies if dropdown is multi-select.
     */
    isMultiSelect?: boolean;
    /**
     * Specify columns configuration for dropdown.
     */
    columns?: ColumnProps[];
    /**
     * Specify to close dropdown on change
     */
    shouldCloseOnChange?: boolean;
}
