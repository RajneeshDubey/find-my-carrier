import * as React from "react";
import { CommonProps } from "../utility";
export declare type PopoverPosition = "auto" | "auto-start" | "auto-end" | "top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "right" | "right-start" | "right-end" | "left" | "left-start" | "left-end";
export declare type InteractiveEvents = React.MouseEvent<HTMLButtonElement, MouseEvent> | PointerEvent | MouseEvent | TouchEvent | KeyboardEvent;
export interface PopoverPortalProps extends React.HTMLAttributes<HTMLDivElement>, CommonProps {
    /**
     * The props for the base popover.
     *
     * @default {}
     */
    basePopoverProps?: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>;
    /**
     * The content for the popover portal.
     */
    content: React.ReactNode | Function;
    /**
     * If the popover portal has a nubbin.
     *
     * @default false
     */
    hasNubbin?: boolean;
    /**
     * The close event handler for the popover portal.
     */
    onClose: (event: React.MouseEvent<HTMLButtonElement, MouseEvent> | PointerEvent | MouseEvent | TouchEvent | KeyboardEvent) => void;
    /**
     * The popover container ref for the popover portal.
     */
    popoverContainerRef: React.RefObject<HTMLDivElement>;
    /**
     * The position for the popover portal.
     *
     * @default 'bottom'
     */
    position?: PopoverPosition;
    /**
     * The trigger ref for the popover portal.
     */
    triggerRef: React.RefObject<unknown>;
    /**
     * If true, PopperJS strategy will be fixed
     * @default false
     */
    isFixed?: boolean;
    /**
     * If true, focus will be locked to the popover contents
     * @default false
     */
    focusLock?: boolean;
    /**
     * The popper offset away from the reference
     * https://popper.js.org/docs/v2/modifiers/offset/
     */
    margin?: Number;
    /**
     * The popper offset along the reference.
     * https://popper.js.org/docs/v2/modifiers/offset/
     */
    skid?: Number;
    /**
     * If true, focus will shift within the popover.
     * @default true
     */
    autoFocus?: boolean;
    /**
     * Provide addition classes for base, arrow, content
     */
    overrides?: any;
    /**
     * Popper options override https://popper.js.org/popper-documentation.html#Popper.Defaults.
     */
    popperOptions?: any;
    /**
     * Custom Element ref used to for with React Portal container
     */
    mountNodeRef?: any;
    /**
     * If popover to be dismissed on Esc
     * @default false
     */
    disableCloseOnEsc?: boolean;
    /**
     * If popover to be dismissed on outside click
     * @default false
     */
    disableCloseOnClickOutside?: boolean;
    /**
     * Popover will not be flipped automatically. Do not use "auto" placements if disabled
     * @default false;
     */
    disablePopoverFlip?: boolean;
    /**
     * @default false;
     */
    disablePortal?: boolean;
    /**
     * On Popover Mouse Enter callback
     */
    onMouseEnter?: (event: React.MouseEvent | MouseEvent) => void;
    /**
     * On Popover Mouse Leave callback
     */
    onMouseLeave?: (event: React.MouseEvent | MouseEvent) => void;
}
export declare const PopoverPortal: React.FunctionComponent<PopoverPortalProps>;
