import * as React from "react";
export declare type ButtonSize = "large" | "medium" | "small";
export declare type ButtonType = "button" | "reset" | "submit";
export declare type ButtonVariant = "primary" | "secondary" | "tertiary";
export declare type ButtonTagName = "a" | "button";
export interface ButtonOwnProps extends Omit<React.AllHTMLAttributes<HTMLButtonElement | HTMLAnchorElement>, "size"> {
    /**
     * The content for the button.
     */
    children: React.ReactNode;
    /**
     * If provided, additional class name to provide on the root element.
     */
    className?: string;
    /**
     * If the button is disabled.
     *
     * @default false
     */
    disabled?: boolean;
    /**
     * If the button is displayed at full width.
     *
     * @default false
     */
    isFluid?: boolean;
    /**
     * The leading content for the button.
     */
    leading?: React.ReactNode;
    /**
     * The size for the button.
     *
     * @default 'small'
     */
    size?: ButtonSize;
    /**
     * The trailing content for the button.
     */
    trailing?: React.ReactNode;
    /**
     * The type for the button.
     *
     * @default 'button'
     */
    type?: ButtonType;
    /**
     * The variant for the button.
     *
     * @default 'secondary'
     */
    variant?: ButtonVariant;
}
export declare type ButtonRef<T> = (instance: T | null) => void | React.MutableRefObject<T | null> | null;
export declare type ButtonAnchorProps = React.AnchorHTMLAttributes<HTMLAnchorElement> & ButtonOwnProps & {
    /**
     * The href for the rendered anchor.
     */
    href: string;
    /**
     * The click event handler for the anchor.
     */
    onClick?: (event: React.MouseEvent<HTMLAnchorElement> | React.KeyboardEvent) => void;
    /**
     * The target for the rendered anchor.
     */
    target?: string;
};
export declare type ButtonButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement> & ButtonOwnProps & {
    /**
     * The click event handler for the button.
     */
    onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;
};
export declare type ButtonProps<T extends ButtonTagName> = T extends "a" ? ButtonAnchorProps : ButtonButtonProps;
export declare type GetButtonElement<T extends ButtonTagName> = T extends "a" ? HTMLAnchorElement : HTMLButtonElement;
/**
 * import { Button } from "@seller-center/core-components"
 */
export declare const Button: <T extends ButtonTagName = "button">(props: ButtonProps<T> & {
    as?: T | undefined;
    buttonRef?: ((instance: (T extends "a" ? HTMLAnchorElement : HTMLButtonElement) | null) => void) | React.RefObject<T extends "a" ? HTMLAnchorElement : HTMLButtonElement> | null | undefined;
}) => JSX.Element;
