import * as React from "react";
/**
 * Get a `React.HTMLElement` from a `React.DetailedHTMLProps`.
 */
export declare type UnwrapDetailedHTMLProps<T> = T extends React.DetailedHTMLProps<infer TA, any> ? TA : never;
/**
 * Get a HTMLElement from a `React.DetailedHTMLProps`.
 */
export declare type UnwrapDetailedHTMLPropsHTMLAttributes<T> = T extends React.DetailedHTMLProps<infer TA, any> ? TA extends React.HTMLAttributes<infer TB> ? TB : never : never;
/**
 * Get a type suitable for a React component's property's type where the `as`
 * property can represent any HTML element string.
 */
export declare type PolymorphicElement<T extends keyof JSX.IntrinsicElements> = UnwrapDetailedHTMLProps<JSX.IntrinsicElements[T]> & {
    /**
     * The HTMLElement for the component.
     *
     * @example
     * <Component as="h1">Heading</Component>
     * // Renders: <h1>Heading</h1>
     */
    as?: T;
};
/**
 * Get a type suitable for `React.forwardRef`'s `ref` argument.
 */
export declare type PolymorphicRef<T extends keyof JSX.IntrinsicElements> = React.Ref<UnwrapDetailedHTMLPropsHTMLAttributes<T>>;
