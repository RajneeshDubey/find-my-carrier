{"ast":null,"code":"import { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';\nimport { useState, useRef, useEffect, createElement } from 'react';\nimport classNames from 'classnames';\nimport { throttle } from '../utility/throttle.js';\nimport style from './Collapse.module.scss.js';\n\nvar Collapse = _ref => {\n  var {\n    children,\n    className,\n    isOpen = false,\n    minHeight = 0\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"children\", \"className\", \"isOpen\", \"minHeight\"]); // const { children, className, isOpen = false, minHeight = 0, ...rest } = props;\n\n\n  var [maxHeight, setMaxHeight] = useState();\n  var ref = useRef(null);\n  var contentRef = useRef(null);\n  var isHidden = !isOpen && minHeight === 0; // NOTE: Auto prevents transitions on open content.\n\n  var contentHeight = maxHeight || \"auto\";\n\n  if (!isOpen) {\n    contentHeight = minHeight;\n  }\n  /**\n   * NOTE: This hook manages the case where the child content size changes while the\n   * component is open / visible\n   */\n\n\n  useEffect(() => {\n    var {\n      current\n    } = contentRef; // istanbul ignore next\n\n    var observer = new ResizeObserver(entries => {\n      setMaxHeight(entries[0].target.scrollHeight);\n    });\n    /* istanbul ignore else: branch coverage fix */\n\n    if (current) {\n      observer.observe(current);\n    }\n\n    return () => {\n      /* istanbul ignore else: branch coverage fix */\n      if (current) {\n        observer.unobserve(current);\n      }\n    };\n  }, [contentRef]);\n  /**\n   * NOTE: This hook manages happy path height recalculations. Hook dependencies are finiky so please\n   * be careful of that. Ensure that this component gets properly rendered in all conditions—including `Modal`.\n   */\n\n  useEffect(() => {\n    var {\n      current\n    } = ref;\n    setMaxHeight(current === null || current === void 0 ? void 0 : current.scrollHeight);\n  }, [maxHeight]);\n  /**\n   * Note: This hook manages accessibility and visibility. Edge case where bottom\n   * margin is not calculated in scrollHeight. Once transition ends this will\n   * ensure height is updated.\n   */\n\n  useEffect(() => {\n    var {\n      current\n    } = ref;\n    /* istanbul ignore else: branch coverage fix */\n\n    if (current) {\n      current.style.visibility = isHidden ? \"hidden\" : \"\";\n    }\n    /* istanbul ignore next */\n\n\n    var onTransitionEnd = () => {\n      // NOTE: Once content is collapsed, we need to hide it from screen readers.\n      if (current && isHidden) {\n        current.style.visibility = \"hidden\";\n        return;\n      }\n      /* istanbul ignore else: branch coverage fix */\n\n\n      if (maxHeight === (current === null || current === void 0 ? void 0 : current.scrollHeight)) {\n        return;\n      }\n      /* istanbul ignore next: ignoring edge case */\n\n\n      setMaxHeight(current === null || current === void 0 ? void 0 : current.scrollHeight);\n    };\n\n    current === null || current === void 0 ? void 0 : current.addEventListener(\"transitionend\", onTransitionEnd);\n    return () => {\n      current === null || current === void 0 ? void 0 : current.removeEventListener(\"transitionend\", onTransitionEnd);\n    };\n  }, [isHidden, maxHeight]);\n  /**\n   * NOTE: This hook manages changes to the component height when the browser resizes.\n   */\n\n  useEffect(() => {\n    var onResize = throttle(() => {\n      var {\n        current\n      } = ref; // Set content height on page resize.\n\n      setMaxHeight(current === null || current === void 0 ? void 0 : current.scrollHeight);\n    }, 33.33);\n    window.addEventListener(\"resize\", onResize);\n    return () => {\n      window.removeEventListener(\"resize\", onResize);\n    };\n  }, []);\n  return /*#__PURE__*/createElement(\"div\", _extends({\n    \"aria-hidden\": isHidden,\n    className: classNames(style.collapsible, isHidden && style.hidden, className),\n    ref: ref // eslint-disable-next-line react/forbid-dom-props\n    ,\n    style: {\n      maxHeight: contentHeight\n    }\n  }, rest), /*#__PURE__*/createElement(\"div\", {\n    ref: contentRef\n  }, children));\n};\n\nexport { Collapse };","map":{"version":3,"names":["objectWithoutProperties","_objectWithoutProperties","extends","_extends","useState","useRef","useEffect","createElement","classNames","throttle","style","Collapse","_ref","children","className","isOpen","minHeight","rest","maxHeight","setMaxHeight","ref","contentRef","isHidden","contentHeight","current","observer","ResizeObserver","entries","target","scrollHeight","observe","unobserve","visibility","onTransitionEnd","addEventListener","removeEventListener","onResize","window","collapsible","hidden"],"sources":["/Users/r0d025j/Documents/IMD/GT22/find-my-carrier/carrier-prediction-ui/node_modules/@seller-center/core-components/dist/esm/components/src/Collapse/Collapse.js"],"sourcesContent":["import { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';\nimport { useState, useRef, useEffect, createElement } from 'react';\nimport classNames from 'classnames';\nimport { throttle } from '../utility/throttle.js';\nimport style from './Collapse.module.scss.js';\n\nvar Collapse = _ref => {\n  var {\n    children,\n    className,\n    isOpen = false,\n    minHeight = 0\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"children\", \"className\", \"isOpen\", \"minHeight\"]);\n\n  // const { children, className, isOpen = false, minHeight = 0, ...rest } = props;\n  var [maxHeight, setMaxHeight] = useState();\n  var ref = useRef(null);\n  var contentRef = useRef(null);\n  var isHidden = !isOpen && minHeight === 0; // NOTE: Auto prevents transitions on open content.\n\n  var contentHeight = maxHeight || \"auto\";\n\n  if (!isOpen) {\n    contentHeight = minHeight;\n  }\n  /**\n   * NOTE: This hook manages the case where the child content size changes while the\n   * component is open / visible\n   */\n\n\n  useEffect(() => {\n    var {\n      current\n    } = contentRef; // istanbul ignore next\n\n    var observer = new ResizeObserver(entries => {\n      setMaxHeight(entries[0].target.scrollHeight);\n    });\n    /* istanbul ignore else: branch coverage fix */\n\n    if (current) {\n      observer.observe(current);\n    }\n\n    return () => {\n      /* istanbul ignore else: branch coverage fix */\n      if (current) {\n        observer.unobserve(current);\n      }\n    };\n  }, [contentRef]);\n  /**\n   * NOTE: This hook manages happy path height recalculations. Hook dependencies are finiky so please\n   * be careful of that. Ensure that this component gets properly rendered in all conditions—including `Modal`.\n   */\n\n  useEffect(() => {\n    var {\n      current\n    } = ref;\n    setMaxHeight(current === null || current === void 0 ? void 0 : current.scrollHeight);\n  }, [maxHeight]);\n  /**\n   * Note: This hook manages accessibility and visibility. Edge case where bottom\n   * margin is not calculated in scrollHeight. Once transition ends this will\n   * ensure height is updated.\n   */\n\n  useEffect(() => {\n    var {\n      current\n    } = ref;\n    /* istanbul ignore else: branch coverage fix */\n\n    if (current) {\n      current.style.visibility = isHidden ? \"hidden\" : \"\";\n    }\n    /* istanbul ignore next */\n\n\n    var onTransitionEnd = () => {\n      // NOTE: Once content is collapsed, we need to hide it from screen readers.\n      if (current && isHidden) {\n        current.style.visibility = \"hidden\";\n        return;\n      }\n      /* istanbul ignore else: branch coverage fix */\n\n\n      if (maxHeight === (current === null || current === void 0 ? void 0 : current.scrollHeight)) {\n        return;\n      }\n      /* istanbul ignore next: ignoring edge case */\n\n\n      setMaxHeight(current === null || current === void 0 ? void 0 : current.scrollHeight);\n    };\n\n    current === null || current === void 0 ? void 0 : current.addEventListener(\"transitionend\", onTransitionEnd);\n    return () => {\n      current === null || current === void 0 ? void 0 : current.removeEventListener(\"transitionend\", onTransitionEnd);\n    };\n  }, [isHidden, maxHeight]);\n  /**\n   * NOTE: This hook manages changes to the component height when the browser resizes.\n   */\n\n  useEffect(() => {\n    var onResize = throttle(() => {\n      var {\n        current\n      } = ref; // Set content height on page resize.\n\n      setMaxHeight(current === null || current === void 0 ? void 0 : current.scrollHeight);\n    }, 33.33);\n    window.addEventListener(\"resize\", onResize);\n    return () => {\n      window.removeEventListener(\"resize\", onResize);\n    };\n  }, []);\n  return /*#__PURE__*/createElement(\"div\", _extends({\n    \"aria-hidden\": isHidden,\n    className: classNames(style.collapsible, isHidden && style.hidden, className),\n    ref: ref // eslint-disable-next-line react/forbid-dom-props\n    ,\n    style: {\n      maxHeight: contentHeight\n    }\n  }, rest), /*#__PURE__*/createElement(\"div\", {\n    ref: contentRef\n  }, children));\n};\n\nexport { Collapse };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}