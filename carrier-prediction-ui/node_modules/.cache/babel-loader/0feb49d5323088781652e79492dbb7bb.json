{"ast":null,"code":"import { useEffect } from 'react';\n/**\n *  React hook for hijacking the functionality of the 'tab' key. When 'tab' is pressed, focus wil move to the element referenced by the 'ref' param instead of where it naturally would have moved.\n *\n * @example\n *  const MyComponent = () => {\n *    const myRef = useRef(null);\n *\n *    useFocusControl(myRef);\n *\n *    return (\n *      <div>\n *        <button ref={myRef} onClick={() => {}}>\n *          action\n *        </button>\n *      </div>\n *    );\n *  };\n *\n *  // Regardless of where focus was when the component mounted, the next press of the 'tab' key will focus the button in this component.\n *\n * @param {React.RefObject} ref —  The ref to the component that will recieve focus once the 'tab' key is pressed\n * @param {array} conditions — An array containing variables that when changed will rerun the effect.\n * @returns {void}\n */\n\nvar useFocusControl = function (ref) {\n  let conditions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  useEffect(() => {\n    var _ref$current;\n\n    var canFocus = ref === null || ref === void 0 ? void 0 : (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.focus;\n\n    var handleFocusChange = e => {\n      e.preventDefault();\n      /* istanbul ignore else */\n\n      if (canFocus) {\n        var _ref$current2;\n\n        ref === null || ref === void 0 ? void 0 : (_ref$current2 = ref.current) === null || _ref$current2 === void 0 ? void 0 : _ref$current2.focus();\n        document.removeEventListener(\"keydown\", handleFocusChange);\n      }\n    };\n\n    if (canFocus) {\n      document.addEventListener(\"keydown\", handleFocusChange);\n    }\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleFocusChange);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ref, ...conditions]);\n};\n\nexport { useFocusControl };","map":{"version":3,"names":["useEffect","useFocusControl","ref","conditions","_ref$current","canFocus","current","focus","handleFocusChange","e","preventDefault","_ref$current2","document","removeEventListener","addEventListener"],"sources":["/Users/r0d025j/Documents/IMD/GT22/find-my-carrier/carrier-prediction-ui/node_modules/@seller-center/core-components/dist/esm/components/src/utility/useFocusControl.js"],"sourcesContent":["import { useEffect } from 'react';\n\n/**\n *  React hook for hijacking the functionality of the 'tab' key. When 'tab' is pressed, focus wil move to the element referenced by the 'ref' param instead of where it naturally would have moved.\n *\n * @example\n *  const MyComponent = () => {\n *    const myRef = useRef(null);\n *\n *    useFocusControl(myRef);\n *\n *    return (\n *      <div>\n *        <button ref={myRef} onClick={() => {}}>\n *          action\n *        </button>\n *      </div>\n *    );\n *  };\n *\n *  // Regardless of where focus was when the component mounted, the next press of the 'tab' key will focus the button in this component.\n *\n * @param {React.RefObject} ref —  The ref to the component that will recieve focus once the 'tab' key is pressed\n * @param {array} conditions — An array containing variables that when changed will rerun the effect.\n * @returns {void}\n */\n\nvar useFocusControl = (ref,\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nconditions = []) => {\n  useEffect(() => {\n    var _ref$current;\n\n    var canFocus = ref === null || ref === void 0 ? void 0 : (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.focus;\n\n    var handleFocusChange = e => {\n      e.preventDefault();\n      /* istanbul ignore else */\n\n      if (canFocus) {\n        var _ref$current2;\n\n        ref === null || ref === void 0 ? void 0 : (_ref$current2 = ref.current) === null || _ref$current2 === void 0 ? void 0 : _ref$current2.focus();\n        document.removeEventListener(\"keydown\", handleFocusChange);\n      }\n    };\n\n    if (canFocus) {\n      document.addEventListener(\"keydown\", handleFocusChange);\n    }\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleFocusChange);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ref, ...conditions]);\n};\n\nexport { useFocusControl };\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,eAAe,GAAG,UAACC,GAAD,EAEF;EAAA,IAApBC,UAAoB,uEAAP,EAAO;EAClBH,SAAS,CAAC,MAAM;IACd,IAAII,YAAJ;;IAEA,IAAIC,QAAQ,GAAGH,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,KAAK,CAA7B,GAAiC,KAAK,CAAtC,GAA0C,CAACE,YAAY,GAAGF,GAAG,CAACI,OAApB,MAAiC,IAAjC,IAAyCF,YAAY,KAAK,KAAK,CAA/D,GAAmE,KAAK,CAAxE,GAA4EA,YAAY,CAACG,KAAlJ;;IAEA,IAAIC,iBAAiB,GAAGC,CAAC,IAAI;MAC3BA,CAAC,CAACC,cAAF;MACA;;MAEA,IAAIL,QAAJ,EAAc;QACZ,IAAIM,aAAJ;;QAEAT,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,KAAK,CAA7B,GAAiC,KAAK,CAAtC,GAA0C,CAACS,aAAa,GAAGT,GAAG,CAACI,OAArB,MAAkC,IAAlC,IAA0CK,aAAa,KAAK,KAAK,CAAjE,GAAqE,KAAK,CAA1E,GAA8EA,aAAa,CAACJ,KAAd,EAAxH;QACAK,QAAQ,CAACC,mBAAT,CAA6B,SAA7B,EAAwCL,iBAAxC;MACD;IACF,CAVD;;IAYA,IAAIH,QAAJ,EAAc;MACZO,QAAQ,CAACE,gBAAT,CAA0B,SAA1B,EAAqCN,iBAArC;IACD;;IAED,OAAO,MAAM;MACXI,QAAQ,CAACC,mBAAT,CAA6B,SAA7B,EAAwCL,iBAAxC;IACD,CAFD,CArBc,CAuBX;EACJ,CAxBQ,EAwBN,CAACN,GAAD,EAAM,GAAGC,UAAT,CAxBM,CAAT;AAyBD,CA5BD;;AA8BA,SAASF,eAAT"},"metadata":{},"sourceType":"module"}