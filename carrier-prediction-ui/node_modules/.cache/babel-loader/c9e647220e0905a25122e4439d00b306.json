{"ast":null,"code":"import tzIntlTimeZoneName from '../../_lib/tzIntlTimeZoneName';\nimport tzParseTimezone from '../../_lib/tzParseTimezone';\nvar MILLISECONDS_IN_MINUTE = 60 * 1000;\nvar formatters = {\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = options.timeZone ? tzParseTimezone(options.timeZone, originalDate) / MILLISECONDS_IN_MINUTE : originalDate.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimeter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimeter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimeter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimeter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = options.timeZone ? tzParseTimezone(options.timeZone, originalDate) / MILLISECONDS_IN_MINUTE : originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimeter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimeter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimeter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimeter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function (date, token, localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = options.timeZone ? tzParseTimezone(options.timeZone, originalDate) / MILLISECONDS_IN_MINUTE : originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function (date, token, localize, options) {\n    var originalDate = options._originalDate || date;\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return tzIntlTimeZoneName('short', originalDate, options);\n      // Long\n\n      case 'zzzz':\n      default:\n        return tzIntlTimeZoneName('long', originalDate, options);\n    }\n  }\n};\n\nfunction addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}\n\nfunction formatTimezone(offset, dirtyDelimeter) {\n  var delimeter = dirtyDelimeter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimeter + minutes;\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimeter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n\n  return formatTimezone(offset, dirtyDelimeter);\n}\n\nfunction formatTimezoneShort(offset, dirtyDelimeter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n\n  var delimeter = dirtyDelimeter || '';\n  return sign + String(hours) + delimeter + addLeadingZeros(minutes, 2);\n}\n\nexport default formatters;","map":{"version":3,"names":["tzIntlTimeZoneName","tzParseTimezone","MILLISECONDS_IN_MINUTE","formatters","X","date","token","localize","options","originalDate","_originalDate","timezoneOffset","timeZone","getTimezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","x","O","formatTimezoneShort","z","addLeadingZeros","number","targetLength","sign","output","Math","abs","toString","length","offset","dirtyDelimeter","delimeter","absOffset","hours","floor","minutes","String"],"sources":["/Users/r0d025j/Documents/IMD/GT22/find-my-carrier/carrier-prediction-ui/node_modules/date-fns-tz/esm/format/formatters/index.js"],"sourcesContent":["import tzIntlTimeZoneName from '../../_lib/tzIntlTimeZoneName'\nimport tzParseTimezone from '../../_lib/tzParseTimezone'\n\nvar MILLISECONDS_IN_MINUTE = 60 * 1000\n\nvar formatters = {\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function(date, token, localize, options) {\n    var originalDate = options._originalDate || date\n    var timezoneOffset = options.timeZone\n      ? tzParseTimezone(options.timeZone, originalDate) / MILLISECONDS_IN_MINUTE\n      : originalDate.getTimezoneOffset()\n\n    if (timezoneOffset === 0) {\n      return 'Z'\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset)\n\n      // Hours, minutes and optional seconds without `:` delimeter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case 'XXXX':\n      case 'XX': // Hours and minutes without `:` delimeter\n        return formatTimezone(timezoneOffset)\n\n      // Hours, minutes and optional seconds with `:` delimeter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimeter\n      default:\n        return formatTimezone(timezoneOffset, ':')\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function(date, token, localize, options) {\n    var originalDate = options._originalDate || date\n    var timezoneOffset = options.timeZone\n      ? tzParseTimezone(options.timeZone, originalDate) / MILLISECONDS_IN_MINUTE\n      : originalDate.getTimezoneOffset()\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset)\n\n      // Hours, minutes and optional seconds without `:` delimeter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case 'xxxx':\n      case 'xx': // Hours and minutes without `:` delimeter\n        return formatTimezone(timezoneOffset)\n\n      // Hours, minutes and optional seconds with `:` delimeter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimeter\n      default:\n        return formatTimezone(timezoneOffset, ':')\n    }\n  },\n\n  // Timezone (GMT)\n  O: function(date, token, localize, options) {\n    var originalDate = options._originalDate || date\n    var timezoneOffset = options.timeZone\n      ? tzParseTimezone(options.timeZone, originalDate) / MILLISECONDS_IN_MINUTE\n      : originalDate.getTimezoneOffset()\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':')\n      // Long\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':')\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function(date, token, localize, options) {\n    var originalDate = options._originalDate || date\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return tzIntlTimeZoneName('short', originalDate, options)\n      // Long\n      case 'zzzz':\n      default:\n        return tzIntlTimeZoneName('long', originalDate, options)\n    }\n  }\n}\n\nfunction addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : ''\n  var output = Math.abs(number).toString()\n  while (output.length < targetLength) {\n    output = '0' + output\n  }\n  return sign + output\n}\n\nfunction formatTimezone(offset, dirtyDelimeter) {\n  var delimeter = dirtyDelimeter || ''\n  var sign = offset > 0 ? '-' : '+'\n  var absOffset = Math.abs(offset)\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2)\n  var minutes = addLeadingZeros(absOffset % 60, 2)\n  return sign + hours + delimeter + minutes\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimeter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+'\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2)\n  }\n  return formatTimezone(offset, dirtyDelimeter)\n}\n\nfunction formatTimezoneShort(offset, dirtyDelimeter) {\n  var sign = offset > 0 ? '-' : '+'\n  var absOffset = Math.abs(offset)\n  var hours = Math.floor(absOffset / 60)\n  var minutes = absOffset % 60\n  if (minutes === 0) {\n    return sign + String(hours)\n  }\n  var delimeter = dirtyDelimeter || ''\n  return sign + String(hours) + delimeter + addLeadingZeros(minutes, 2)\n}\n\nexport default formatters\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}